var searchIndex = {};
searchIndex["cmake"] = {"doc":"A build dependency for running `cmake` to build a native library","items":[[3,"Config","cmake","Builder style configuration for a pending CMake build.",null,null],[5,"build","","Builds the native library rooted at `path` with the default cmake options. This will return the directory in which the library was installed.",null,{"inputs":[{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"new","","Creates a new blank set of configuration to build the project specified at the path `path`.",0,{"inputs":[{"name":"p"}],"output":{"name":"config"}}],[11,"generator","","Sets the build-tool generator (`-G`) for this compilation.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"config"}}],[11,"cflag","","Adds a custom flag to pass down to the C compiler, supplementing those that this library already passes.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"config"}}],[11,"cxxflag","","Adds a custom flag to pass down to the C++ compiler, supplementing those that this library already passes.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"config"}}],[11,"define","","Adds a new `-D` flag to pass to cmake during the generation step.",0,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"config"}}],[11,"register_dep","","Registers a dependency for this compilation on the native library built by Cargo previously.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"config"}}],[11,"target","","Sets the target triple for this compilation.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"config"}}],[11,"host","","Sets the host triple for this compilation.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"config"}}],[11,"out_dir","","Sets the output directory for this compilation.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"config"}}],[11,"profile","","Sets the profile for this compilation.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"config"}}],[11,"static_crt","","Configures whether the /MT flag or the /MD flag will be passed to msvc build tools.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"config"}}],[11,"build_arg","","Add an argument to the final `cmake` build step",0,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"config"}}],[11,"env","","Configure an environment variable for the `cmake` processes spawned by this crate in the `build` step.",0,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"config"}}],[11,"build_target","","Sets the build target for the final `cmake` build step, this will default to \"install\" if not specified.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"config"}}],[11,"uses_cxx11","","Alters the default target triple on OSX to ensure that c++11 is available. Does not change the target triple if it is explicitly specified.",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"build","","Run this configuration, compiling the library with all the configured options.",0,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}]],"paths":[[3,"Config"]]};
initSearch(searchIndex);
